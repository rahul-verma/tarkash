# This file is a part of Tarkash
# Copyright 2015-2024 Rahul Verma

# Website: www.RahulVerma.net

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Log module contains helper functions for easy and powerful logging with Tarkash.

All log messages are directed to console as well as Tarkash.log file which is generated on a per run basis and is placed in **<project_root>/report/run_dir/log** directory.

Messages generated by the test project as well as Tarkash go to the same log for easy checking of flow.

6 levels of logging are available:

    #. TRACE
    #. DEBUG
    #. INFO
    #. WARNING
    #. ERROR
    #. FATAL

These are represented by six different log_* functions.

**TRACE** has the lowest priority and **FATAL** has the highest priority amongst message levels.

Following Tarkash Options are related to logging:
    * LOG_CONSOLE_LEVEL: Minimum level of logging for a run for displaying log messages on console.
    * LOG_CONSOLE_LEVEL: Minimum level of logging for a run for displaying log messages in Tarkash.log.
    * LOG_ALLOWED_CONTEXTS: The context strings which determine log messages belonging to which contexts can be displayed and logged.
'''

import sys

from tarkash.track.stack import Stack
from tarkash.type.annotate import *

# This file is a part of Tarkash
# Copyright 2015-2024 Rahul Verma

# Website: www.RahulVerma.net

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import os
import sys
import types
import inspect
import functools

class _InvokerFilter(logging.Filter):

    def filter(self, record):
        if not hasattr(record, "invoker"):
            record.invoker = '<no_trace>'
        from tarkash import Tarkash
        # if hasattr(record, "contexts"):
        #     if not record.contexts.intersection(Tarkash._get_allowed_log_contexts()):
        #         return False

        return True

class _Logger:

    def __init__(self, ref_config):
        # For now we use environment variables.
        from tarkash.config.dummy_ref_config import RefConfig
        self.__ref_config = RefConfig()
        self.__add_trace_level()
        self.__logger = None
        self.__load()

    def __load(self):
        from tarkash.core.constant import TarkashOption
        # dl = logging.getLevelName(self.__ref_config.value(TarkashOption.LOG_CONSOLE_LEVEL).name) # logging.getLevelName(
        dl = logging.getLevelName(self.__ref_config.value(TarkashOption.LOG_CONSOLE_LEVEL))
        log_dir = self.__ref_config.value(TarkashOption.LOG_DIR)
        if not os.path.isdir(log_dir):
            os.makedirs(log_dir)
        fl = logging.getLevelName(self.__ref_config.value(TarkashOption.LOG_FILE_LEVEL))
        fname = "tarkash.log"
        lpath = os.path.join(log_dir, fname)

        logger = logging.getLogger("tarkash")
        logger.addFilter(_InvokerFilter())
        logger.setLevel(logging.TRACE)
        ch = logging.StreamHandler(sys.stdout)
        ch.flush = sys.stdout.flush
        ch.setLevel(dl)
        fh = logging.FileHandler(lpath, "w", 'utf-8')
        fh.setLevel(fl)
        #f_fmt = logging.Formatter(u'[%(levelname)5s]\t%(asctime)s\t%(pathname)s::%(module)s.%(funcName)s:%(lineno)d\t%(message)s')
        f_fmt = logging.Formatter(u'[%(levelname)7s]\t%(asctime)s\t%(invoker)s\t%(message)s')
        c_fmt = logging.Formatter(u'[LOG] %(message)s')
        ch.setFormatter(c_fmt)
        fh.setFormatter(f_fmt)
        logger.addHandler(ch)
        logger.addHandler(fh)

        self.__logger = logger

    def __add_trace_level(self):
        logging.TRACE = logging.DEBUG - 5
        logging.addLevelName(logging.TRACE, "TRACE")
        def trace(self, message, *args, **kws):
            if self.isEnabledFor(logging.TRACE):
                # Yes, logger takes its '*args' as 'args'.
                self._log(logging.TRACE, message, args, **kws)
        logging.Logger.trace = trace

    @property
    def logger(self):
        return self.__logger


def __log(invoker, level, *msg, contexts=None, tobj=None):
    from tarkash import Tarkash
    if type(contexts) is str:
        contexts = (contexts,)
    elif contexts is None:
        contexts = ("default",)
    contexts = set(contexts)
    try:
        msg = " ".join([str(m).replace('\n', ' ').replace('\r', '') for m in msg])
        if tobj is not None:
            tobj.append_trace(msg)
        getattr(Tarkash.get_logger(), level)(msg, extra={'invoker': invoker, 'contexts':contexts})
    except AttributeError as e:
        import traceback
        traceback.print_exc()
        # In case the logging is called before the logger is set.
        # In future versions, see if there can be a fallabck logger.
        pass
    except OSError:
        ## On Windows 10, random handle related bugs happen.
        if level.lower() in {"info", "debug", "trace"} :
            sys.stdout.write(msg+ "\n")
        else :
            sys.stderr.write(msg+"\n")

def log_trace(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None):
    '''
        Log a message with **TRACE** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
    '''
    __log(Stack.get_invoker(), "trace", *msg, contexts=contexts, tobj=tobj)

def log_debug(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None) -> None:
    '''
        Log a message with **DEBUG** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
            tobj: A TarkashObject. If provided, the message is appended to traces of this object.
    '''
    __log(Stack.get_invoker(), "debug", *msg, contexts=contexts, tobj=tobj)

def log_info(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None) -> None:
    '''
        Log a message with **INFO** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
            tobj: A TarkashObject. If provided, the message is appended to traces of this object.
    '''
    __log(Stack.get_invoker(), "info", *msg, contexts=contexts, tobj=tobj)

def log_warning(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None) -> None:
    '''
        Log a message with **WARNING** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
            tobj: A TarkashObject. If provided, the message is appended to traces of this object.
    '''
    __log(Stack.get_invoker(), "warning", *msg, contexts=contexts, tobj=tobj)

def log_error(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None) -> None:
    '''
        Log a message with **ERROR** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
            tobj: A TarkashObject. If provided, the message is appended to traces of this object.
    '''
    __log(Stack.get_invoker(), "error", *msg, contexts=contexts, tobj=tobj)

def log_fatal(*msg: object, contexts: ListOrTupleOrStr=None, tobj=None) -> None:
    '''
        Log a message with **FATAL** level.

        Args: 
            msg: Arbitrary Log Message Objects. String representations of all objects are joined using a single blank space.
            contexts: (Optional) Context strings for this log message.
            tobj: A TarkashObject. If provided, the message is appended to traces of this object.
    '''
    __log(Stack.get_invoker(), "fatal", *msg, contexts=contexts, tobj=tobj)